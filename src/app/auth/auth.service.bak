/*
import {Injectable} from '@angular/core';
import { Router } from '@angular/router';
import {Subject, BehaviorSubject} from 'rxjs';
import { AngularFireAuth } from '@angular/fire/auth';
// import * as firebase from 'firebase';
// import 'firebase/auth';

import { User } from "./user.model";
import { AuthData } from "./auth-data.model";

@Injectable({ providedIn: 'root' })
export class AuthService {
  // private authChange = new Subject<boolean>();
  private authChange = new BehaviorSubject<boolean>(false);
  authChange$ = this.authChange.asObservable();
  private user: User;
  isAuthenticated = false;
  constructor(
    private router: Router,
    // private afAuth: AngularFireAuth
    ) {}

  registerUser(authData: AuthData) {
    console.log('authData',authData);
    firebase.auth().languageCode = 'en';
    firebase.auth()
    .createUserWithEmailAndPassword(authData.email, authData.password)
    .then(result => {
      console.log('then result',result);
      // this.authSuccess();
    })
    .catch((error:any) => {
      console.log('error result',{error: JSON.stringify(error), errorcode: error.code, errormessage: error.message});
    })
    // this.user = {
    //   email: authData.email,
    //   userId: Math.round(Math.random() * 10000).toString(),
    // };
    // this.authSuccess();
  }

  login(authData: AuthData) {
    firebase.auth()
    .signInWithEmailAndPassword(authData.email, authData.password)
    .then(result => {
      // console.log('then result',result);
      const user = firebase.auth().currentUser; //.getIdToken(true).then
      console.log('user',user)
      // firebase.auth().currentUser.getIdToken(true).then(token => {return token});
      firebase.auth().currentUser.getIdTokenResult().then(res => console.log(res));
      // console.log('token',token)
      // this.authSuccess(token);
    })
    .catch((error:any) => {
      console.log('error result',{error: JSON.stringify(error), errorcode: error.code, errormessage: error.message});
    });
    // this.user = {
    //   email: authData.email,
    //   userId: Math.round(Math.random() * 10000).toString(),
    // };
    // this.authSuccess();
  }

  logout() {
    this.user = null;
    this.authChange.next(false);
    this.router.navigate(['/login']);
  }

  getUser() {
    return {...this.user};
  }

  isAuth() {
    // firebase.auth().setPersistence(firebase.auth.Auth.Persistence.SESSION)
    const user = firebase.auth().currentUser; //.getIdToken(true).then
    console.log(user)
    return this.user != null;
  }

  private authSuccess(token: string) {
    localStorage.setItem('token', token);
    console.log('token info',token);
    this.isAuthenticated = true;
    this.authChange.next(true);
    this.router.navigate(['/training']);
  }
}
*/